/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.david.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class EnrichedTrip extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5210784147870413591L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EnrichedTrip\",\"namespace\":\"com.david.avro\",\"fields\":[{\"name\":\"stationInformation\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"StationInformation\",\"fields\":[{\"name\":\"stationId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"externalId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"shortName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"lat\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"lon\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"rentalMethods\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}},{\"name\":\"capacity\",\"type\":\"int\"},{\"name\":\"eightdHasKeyDispenser\",\"type\":\"boolean\"},{\"name\":\"hasKiosk\",\"type\":\"boolean\"},{\"name\":\"googleApiGeocodingJson\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}},{\"name\":\"tripHistory\",\"type\":{\"type\":\"record\",\"name\":\"TripHistory\",\"fields\":[{\"name\":\"start_date\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"start_station_code\",\"type\":\"int\"},{\"name\":\"end_date\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"end_station_code\",\"type\":\"int\"},{\"name\":\"duration_sec\",\"type\":\"int\"},{\"name\":\"is_member\",\"type\":\"int\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EnrichedTrip> ENCODER =
      new BinaryMessageEncoder<EnrichedTrip>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EnrichedTrip> DECODER =
      new BinaryMessageDecoder<EnrichedTrip>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<EnrichedTrip> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<EnrichedTrip> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<EnrichedTrip>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this EnrichedTrip to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a EnrichedTrip from a ByteBuffer. */
  public static EnrichedTrip fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.util.List<com.david.avro.StationInformation> stationInformation;
  @Deprecated public com.david.avro.TripHistory tripHistory;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EnrichedTrip() {}

  /**
   * All-args constructor.
   * @param stationInformation The new value for stationInformation
   * @param tripHistory The new value for tripHistory
   */
  public EnrichedTrip(java.util.List<com.david.avro.StationInformation> stationInformation, com.david.avro.TripHistory tripHistory) {
    this.stationInformation = stationInformation;
    this.tripHistory = tripHistory;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return stationInformation;
    case 1: return tripHistory;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: stationInformation = (java.util.List<com.david.avro.StationInformation>)value$; break;
    case 1: tripHistory = (com.david.avro.TripHistory)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'stationInformation' field.
   * @return The value of the 'stationInformation' field.
   */
  public java.util.List<com.david.avro.StationInformation> getStationInformation() {
    return stationInformation;
  }

  /**
   * Sets the value of the 'stationInformation' field.
   * @param value the value to set.
   */
  public void setStationInformation(java.util.List<com.david.avro.StationInformation> value) {
    this.stationInformation = value;
  }

  /**
   * Gets the value of the 'tripHistory' field.
   * @return The value of the 'tripHistory' field.
   */
  public com.david.avro.TripHistory getTripHistory() {
    return tripHistory;
  }

  /**
   * Sets the value of the 'tripHistory' field.
   * @param value the value to set.
   */
  public void setTripHistory(com.david.avro.TripHistory value) {
    this.tripHistory = value;
  }

  /**
   * Creates a new EnrichedTrip RecordBuilder.
   * @return A new EnrichedTrip RecordBuilder
   */
  public static com.david.avro.EnrichedTrip.Builder newBuilder() {
    return new com.david.avro.EnrichedTrip.Builder();
  }

  /**
   * Creates a new EnrichedTrip RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EnrichedTrip RecordBuilder
   */
  public static com.david.avro.EnrichedTrip.Builder newBuilder(com.david.avro.EnrichedTrip.Builder other) {
    return new com.david.avro.EnrichedTrip.Builder(other);
  }

  /**
   * Creates a new EnrichedTrip RecordBuilder by copying an existing EnrichedTrip instance.
   * @param other The existing instance to copy.
   * @return A new EnrichedTrip RecordBuilder
   */
  public static com.david.avro.EnrichedTrip.Builder newBuilder(com.david.avro.EnrichedTrip other) {
    return new com.david.avro.EnrichedTrip.Builder(other);
  }

  /**
   * RecordBuilder for EnrichedTrip instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EnrichedTrip>
    implements org.apache.avro.data.RecordBuilder<EnrichedTrip> {

    private java.util.List<com.david.avro.StationInformation> stationInformation;
    private com.david.avro.TripHistory tripHistory;
    private com.david.avro.TripHistory.Builder tripHistoryBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.david.avro.EnrichedTrip.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.stationInformation)) {
        this.stationInformation = data().deepCopy(fields()[0].schema(), other.stationInformation);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tripHistory)) {
        this.tripHistory = data().deepCopy(fields()[1].schema(), other.tripHistory);
        fieldSetFlags()[1] = true;
      }
      if (other.hasTripHistoryBuilder()) {
        this.tripHistoryBuilder = com.david.avro.TripHistory.newBuilder(other.getTripHistoryBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing EnrichedTrip instance
     * @param other The existing instance to copy.
     */
    private Builder(com.david.avro.EnrichedTrip other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.stationInformation)) {
        this.stationInformation = data().deepCopy(fields()[0].schema(), other.stationInformation);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tripHistory)) {
        this.tripHistory = data().deepCopy(fields()[1].schema(), other.tripHistory);
        fieldSetFlags()[1] = true;
      }
      this.tripHistoryBuilder = null;
    }

    /**
      * Gets the value of the 'stationInformation' field.
      * @return The value.
      */
    public java.util.List<com.david.avro.StationInformation> getStationInformation() {
      return stationInformation;
    }

    /**
      * Sets the value of the 'stationInformation' field.
      * @param value The value of 'stationInformation'.
      * @return This builder.
      */
    public com.david.avro.EnrichedTrip.Builder setStationInformation(java.util.List<com.david.avro.StationInformation> value) {
      validate(fields()[0], value);
      this.stationInformation = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'stationInformation' field has been set.
      * @return True if the 'stationInformation' field has been set, false otherwise.
      */
    public boolean hasStationInformation() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'stationInformation' field.
      * @return This builder.
      */
    public com.david.avro.EnrichedTrip.Builder clearStationInformation() {
      stationInformation = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'tripHistory' field.
      * @return The value.
      */
    public com.david.avro.TripHistory getTripHistory() {
      return tripHistory;
    }

    /**
      * Sets the value of the 'tripHistory' field.
      * @param value The value of 'tripHistory'.
      * @return This builder.
      */
    public com.david.avro.EnrichedTrip.Builder setTripHistory(com.david.avro.TripHistory value) {
      validate(fields()[1], value);
      this.tripHistoryBuilder = null;
      this.tripHistory = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'tripHistory' field has been set.
      * @return True if the 'tripHistory' field has been set, false otherwise.
      */
    public boolean hasTripHistory() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'tripHistory' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.david.avro.TripHistory.Builder getTripHistoryBuilder() {
      if (tripHistoryBuilder == null) {
        if (hasTripHistory()) {
          setTripHistoryBuilder(com.david.avro.TripHistory.newBuilder(tripHistory));
        } else {
          setTripHistoryBuilder(com.david.avro.TripHistory.newBuilder());
        }
      }
      return tripHistoryBuilder;
    }

    /**
     * Sets the Builder instance for the 'tripHistory' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.david.avro.EnrichedTrip.Builder setTripHistoryBuilder(com.david.avro.TripHistory.Builder value) {
      clearTripHistory();
      tripHistoryBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'tripHistory' field has an active Builder instance
     * @return True if the 'tripHistory' field has an active Builder instance
     */
    public boolean hasTripHistoryBuilder() {
      return tripHistoryBuilder != null;
    }

    /**
      * Clears the value of the 'tripHistory' field.
      * @return This builder.
      */
    public com.david.avro.EnrichedTrip.Builder clearTripHistory() {
      tripHistory = null;
      tripHistoryBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EnrichedTrip build() {
      try {
        EnrichedTrip record = new EnrichedTrip();
        record.stationInformation = fieldSetFlags()[0] ? this.stationInformation : (java.util.List<com.david.avro.StationInformation>) defaultValue(fields()[0]);
        if (tripHistoryBuilder != null) {
          record.tripHistory = this.tripHistoryBuilder.build();
        } else {
          record.tripHistory = fieldSetFlags()[1] ? this.tripHistory : (com.david.avro.TripHistory) defaultValue(fields()[1]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EnrichedTrip>
    WRITER$ = (org.apache.avro.io.DatumWriter<EnrichedTrip>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EnrichedTrip>
    READER$ = (org.apache.avro.io.DatumReader<EnrichedTrip>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
